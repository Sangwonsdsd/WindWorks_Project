<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="employeeMapper">

	<resultMap type = "Employee" id="employeeResult">
		<result column="EMP_NO" property="empNo"/>
		<result column="EMP_NAME" property="empName"/>
		<result column="EMP_EMAIL" property="empEmail"/>
		<result column="EMP_PWD" property="empPwd"/>
		<result column="EMP_PHONE" property="empPhone"/>
		<result column="EMP_AGE" property="empAge"/>
		<result column="EMP_GENDER" property="empGender"/>
		<result column="EMP_ADDRESS" property="empAddress"/>
		<result column="EMP_ENROLL_DATE" property="empEnrollDate"/>
		<result column="EMP_CHANGE_DATE" property="empChangeDate"/>
		<result column="EMP_STATUS" property="empStatus"/>
		<result column="EMP_ONLINE_STATUS" property="empOnlineStatus"/>
		<result column="PROFILE_FILE_PATH" property="profileFilePath"/>
		<result column="JOB_CODE" property="jobCode"/>
		<result column="DEPT_CODE" property="deptCode"/>
		<result column="JOB_NAME" property="jobName"/>
		<result column="DEPT_NAME" property="deptName"/>
	</resultMap>
	
	<!-- 회원가입 쿼리문 -->
	<insert id="insertEmployee">
		INSERT INTO EMPLOYEE(
			EMP_NO,
			EMP_NAME,
			EMP_EMAIL,
			EMP_PWD,
			EMP_PHONE,
			EMP_AGE,
			EMP_GENDER,
			EMP_ADDRESS,
			PROFILE_FILE_PATH
		)
		VALUES (
			SEQ_ENO.NEXTVAL,
			#{empName},
			#{empEmail},
			#{empPwd},
			#{empPhone},
			#{empAge},
			#{empGender},
			#{empAddress},
			#{profileFilePath}
		)
	</insert>
	<!-- 로그인 쿼리문 -->
	<select id="loginEmployee" resultMap = "employeeResult">
		SELECT EMP_NO,
	        EMP_NAME,
	        EMP_EMAIL,
	        EMP_PWD,
	        EMP_PHONE,
	        EMP_AGE,
	        EMP_GENDER,
	        EMP_ADDRESS,
	        EMP_ENROLL_DATE,
	        EMP_CHANGE_DATE,
	        EMP_STATUS,
	        EMP_ONLINE_STATUS,
	        PROFILE_FILE_PATH,
	        JOB_NAME,
	        DEPT_NAME,
	        EMP_WORK_STATUS
		FROM EMPLOYEE
		JOIN DEPARTMENT USING (DEPT_CODE)
		JOIN JOB USING (JOB_CODE)
		WHERE EMP_EMAIL = #{empEmail}
	        AND EMP_STATUS = 1
	</select>
	
	<!-- 온라인상태 변경 -->
	<update id="updateOnline">
      UPDATE EMPLOYEE
         SET EMP_ONLINE_STATUS = 1
       WHERE EMP_NO = #{empNo}
   </update>
   
   <!-- 오프라인 상태 변경 -->
	<update id="updateOffline">
      UPDATE EMPLOYEE
         SET EMP_ONLINE_STATUS = 0
       WHERE EMP_NO = #{empNo}
   </update>
   
   <!-- 자리비움 상태 변경 -->
	<update id="updateAway">
      UPDATE EMPLOYEE
         SET EMP_ONLINE_STATUS = 2
       WHERE EMP_NO = #{empNo}
   </update>
   
	<!-- 총 사원수 조회 쿼리문 -->
	<select id="selectListCount" resultType="_int">
		SELECT COUNT(*)
		  FROM EMPLOYEE
	</select>
	<!-- 사원들 리스트 조회 쿼리문 -->
	<select id="selectList" resultMap="employeeResult">
		SELECT EMP_NO,
			   DEPT_CODE,
			   JOB_CODE,
			   EMP_NAME,
			   EMP_EMAIL,
			   EMP_PHONE,
			   EMP_AGE,
			   EMP_ENROLL_DATE,
			   EMP_STATUS,
			   DEPT_NAME,
			   JOB_NAME
		  FROM EMPLOYEE
		  LEFT JOIN DEPARTMENT USING (DEPT_CODE)
		  LEFT JOIN JOB USING(JOB_CODE)
		  <if test="keyword !=''">
		  	WHERE EMP_NAME LIKE '%' || #{keyword} || '%'
		  </if>  
		  <choose>
		  	<when test="condition == 'empNo'">
	  			<if test="sorting == 'desc'">
	  				ORDER BY EMP_NO DESC
	  			</if>
	  			<if test="sorting == 'asc'">
	  				ORDER BY EMP_NO ASC
	  			</if>
		  	</when>
		  	<when test="condition == 'deptCode'">
				<if test="sorting == 'desc'">
	  				ORDER BY DEPT_CODE DESC
	  			</if>
	  			<if test="sorting == 'asc'">
	  				ORDER BY DEPT_CODE ASC
	  			</if>
		  	</when>
		  	<when test="condition == 'jobCode'">
				<if test="sorting == 'desc'">
	  				ORDER BY JOB_CODE DESC
	  			</if>
	  			<if test="sorting == 'asc'">
	  				ORDER BY JOB_CODE ASC
	  			</if>
		  	</when>
		  	<when test="condition == 'empStatus'">
				<if test="sorting == 'desc'">
	  				ORDER BY EMP_STATUS DESC
	  			</if>
	  			<if test="sorting == 'asc'">
	  				ORDER BY EMP_STATUS ASC
	  			</if>
		  	</when>
		  </choose>
		  
	</select>
	<!-- 재직중인 사원수 가져오는 쿼리문 -->
	<select id="empYCount" resultType="_int">
		SELECT COUNT(*)
		  FROM EMPLOYEE
		 WHERE EMP_STATUS = 1
	</select>
	<!-- 미승인 사원수 가져오는 쿼리문 -->
	<select id="empJobCount" resultType="_int">
		SELECT COUNT(*)
		  FROM EMPLOYEE
		 WHERE EMP_STATUS = 0
	</select>
	<!-- 인사관리 페이지에서 사원 정보 수정 -->
	<update id="employeeUpdate">
      UPDATE EMPLOYEE
         SET DEPT_CODE = #{deptCode},
          	 JOB_CODE = #{jobCode},
          	 EMP_STATUS = #{empStatus}
       WHERE EMP_NO = #{empNo}
   </update>
	<!-- 마이페이지 사원정보수정 -->
	<update id="updateEmployee">
		UPDATE EMPLOYEE
		SET EMP_EMAIL = #{empEmail},
			PROFILE_FILE_PATH = #{profileFilePath},
			EMP_PHONE = #{empPhone}
		WHERE EMP_NO = #{empNo}
	</update>
	
	<!-- 이메일 전달 -->
	<select id="emailEmpList" resultMap="employeeResult">
		SELECT EMP_NO,
				EMP_NAME,
				EMP_EMAIL
		FROM EMPLOYEE
		WHERE EMP_STATUS = 1
			AND EMP_NO != #{empNo}
	</select>
	
	<!-- 아이디찾기 문자인증 -->
	<insert id="insertSendSMS">
		INSERT INTO SENDSMS
				(
				SMS_NO,
				SMS_DATE,
				SMS_NAME,
				SMS_PHONE,
				SMS_CONFIRM_NO
				)
		VALUES
				(
				SEQ_SMNO.NEXTVAL,
				SYSDATE,
				#{smsName},
				#{smsPhone},
				#{randomNumber}
				)
	</insert>
	
	<!-- 문자인증 완료시 아이디 찾기 -->
	<select id="selectfindId" resultMap="employeeResult">
		SELECT EMP_NO,
			   EMP_NAME,
			   EMP_EMAIL,
			   EMP_PHONE
		  FROM EMPLOYEE
		 WHERE EMP_STATUS = 1 <!-- 재직인사람만 보여줄지.. -->
		 AND EMP_PHONE = #{smsPhone}
		 AND EMP_NAME = #{smsName}
	</select>
	
	<!-- 문자인증번호 확인 -->
	<select id="checkConfirmNo" resultType="_int">
		SELECT COUNT(*)
		  FROM SENDSMS
	 	 WHERE SMS_CONFIRM_NO = #{smsConfirmNo}
	 	   AND SMS_PHONE = #{smsPhone}
	</select>
	
	<!-- 비밀번호 찾기 아이디 존재여부 확인 -->
	<select id="checkEmail" resultType="_int">
		SELECT COUNT(*)
		  FROM EMPLOYEE
		 WHERE EMP_EMAIL = #{empEmail}
	</select>
	
	<!-- 비밀번호 찾기 문자인증 완료시 새로운 비밀번호 입력 -->
	<update id="updateNewPwd">
		UPDATE EMPLOYEE
		   SET EMP_PWD = #{empPwd}
		 WHERE EMP_EMAIL = #{empEmail}
	</update>
	
	<update id="updatePassword">
		UPDATE EMPLOYEE
		SET EMP_PWD = #{newPassword}
		WHERE EMP_NO = #{empNo}
	</update>

	<!-- 조직도차트 : dept 리스트 -->
	<select id="selectDeptList" resultMap="employeeResult">
		SELECT DEPT_CODE, DEPT_NAME
		FROM DEPARTMENT
		ORDER BY DEPT_CODE
	</select>
	
	<!-- 조직도차트 : job 리스트 -->
	<select id="selectJobList" resultMap="employeeResult">
		SELECT EMP_NO, EMP_NAME, JOB_NAME
		FROM EMPLOYEE
		JOIN JOB USING(JOB_CODE)
		WHERE EMP_STATUS = 1 
			AND DEPT_CODE = #{deptCode}
	</select>
	
	<!-- 출근상태로 변경 -->
	<update id="statusWork">
		UPDATE EMPLOYEE
         SET EMP_WORK_STATUS = 1
		WHERE EMP_NO = #{empNo}
	</update>
	
	<!-- 퇴근상태로 변경 -->
	<update id="statusLeave">
		UPDATE EMPLOYEE
         SET EMP_WORK_STATUS = 0
		WHERE EMP_NO = #{empNo}
	</update>
	
	<!-- 출퇴근상태 확인 -->
	<select id="selectStatus" resultType="_int">
		SELECT EMP_WORK_STATUS
		FROM EMPLOYEE
		WHERE EMP_NO = #{empNo}
	</select>
	
</mapper>